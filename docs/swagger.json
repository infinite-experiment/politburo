{
    "swagger": "2.0",
    "info": {
        "description": "Backend for Infinite Experiment bot and web client.",
        "title": "Infinite Experiment API",
        "contact": {
            "name": "Sanket Pandia",
            "email": "sanket@example.com"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/api/v1/user/register": {
            "post": {
                "description": "Creates a new user with Discord ID and IF Community username.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User Registration Payload",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.RegisterUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.UserRegisterSwaggerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.UserRegisterSwaggerResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/user/register/init": {
            "post": {
                "description": "Initiates the user registration process given an IF Community ID (IFC ID).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Initiate user registration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Discord ID",
                        "name": "X-Discord-Id",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "123456789",
                        "description": "Discord Server ID",
                        "name": "X-Server-Id",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "API KEY",
                        "name": "X-API-Key",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "IFC ID Payload",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.InitUserRegistrationReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dtos.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dtos.APIResponse"
                        }
                    }
                }
            }
        },
        "/healthCheck": {
            "get": {
                "description": "Verifies the server is running.",
                "tags": [
                    "Misc"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.InitUserRegistrationReq": {
            "type": "object",
            "properties": {
                "ifc_id": {
                    "type": "string"
                }
            }
        },
        "dtos.APIResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "response_time": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dtos.UserRegisterSwaggerResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/responses.UserRegisterResponse"
                },
                "error": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "requests.RegisterUserRequest": {
            "type": "object",
            "required": [
                "discord_id",
                "if_community_id",
                "server_id"
            ],
            "properties": {
                "discord_id": {
                    "type": "string"
                },
                "if_community_id": {
                    "type": "string"
                },
                "server_id": {
                    "type": "string"
                }
            }
        },
        "responses.UserRegisterResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "status": {
                    "type": "boolean"
                }
            }
        }
    }
}